
###########################################    Benefits of GitLab CI/CD    ####################################################################


Error Detection

Detects errors as quickly as possible: fix problems while they are still fresh in developers mind

Increased Efficiency

Reduces integration problems: smaller problems are easier to digest and fix immediately. Bugs won't shut your whole system down.

No Snowball Effect

Avoid compounding problems: allows teams to develop faster, with more confidence and collaboration.

Release Stages

Ensures every change is releasable: test everything, including deployment, before calling it done with less risk on each release.

Valuable Delivery

Delivers value more frequently: reliable deployments mean more releases

Better Feedback Processes

Tight customer feedback loops: fast and frequent customer feedback on changes allow for continuous improvement for your product.

CI/CD Features in GitLab- by Lifecycle Stage

Here are the features you can use in GitLab for CI/CD. They are shown according to the stage in the DevOps Lifecycle. 
Next we’ll look at a few of the key features and how to use them in the Verify, Package, and Release stages of the life cycle. We’ll cover the Secure stage later on today.

How GitLab CI/CD Works 

To use GitLab CI/CD, all you need is an application codebase hosted in a Git repository, and for your build, test, and deployment scripts to be specified in a file called.
gitlab-ci.yml, located in the root path of your repository.


GitLab and AutoDevOps 

Auto DevOps gives you a pre-defined CI/CD configuration which lets you automatically detect, build, test, deploy, and monitor your applications.
This makes it easier to set up every project more consistently.
It is enabled by default for all of your projects but can be disabled by your administrator at the instance level. 
It can be disabled and enabled by GitLab.com users at the project level, and self-managed users can also enable it at the group or instance level.
